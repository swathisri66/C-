int a[5]; 
index  =>  0     1     2    3     4
values => 10    20    30   40    50
Access => a[0] a[1] a[2]  a[3]  a[4]

=> To access the elements of an array, we are using single index and hence these arrays are also called Single-dimensional or 1-D arrays.
====================================================
2-D arrays(or) two-dimensional arrays : To access the elements of an array, if we use two indices, it is a 2-D array.

=> Tables and matrices are best examples for a 2-D array.
Syntax:(See Figure)
/* Program to read and print a matrix */

#include<stdio.h>

int main()
{
 int a[5][5];
 int row,column,i,j;
 printf("Enter row size of matriix A : ");
 scanf("%d",&row);
 printf("Enter column size of matriix A : ");
 scanf("%d",&column);
 
 // Read the matrix elements
 for(i=0;i<row;i++)
 {
  for(j=0;j<column;j++)
  {
  	printf("Enter value for a[%d][%d] : ",i,j);
  	scanf("%d",&a[i][j]);
  }
 }
 
 // Print the matrix elements
 printf("\nThe Entered Matrix is : \n\n");
 for(i=0;i<row;i++)
 {
  for(j=0;j<column;j++)
    printf("   %d  ",a[i][j]);
  printf("\n\n");
 }
 // Print the matrix elements
 printf("\nThe Transpose Matrix is : \n\n");
 for(i=0;i<column;i++)
 {
  for(j=0;j<row;j++)
    printf("   %d  ",a[j][i]);
  printf("\n\n");
 }
}
==================================================
Reading a printing a character :
Read a character as input : 
scanf(%c),getch(),getche(),getchar(),getc(),fgetc()...
Print a character as output : 
printf(%c),putch(),putchar(),putc(),fputc()...
==================================================
/* Printing all ASCII characters */ 

#include<stdio.h>

int main()
{
  int i;
  for(i=0;i<=255;i++)
  {
  	printf("  %d  =>  %c \n",i,i);
  }
}
==============================================
/* Printing all ASCII value of a given character */ 

#include<stdio.h>
#include<conio.h>

int main()
{
  char ch;
  printf("Press any key.....");
  ch = getche();
  printf("\n\nThe ASCII value of Entered Key is : %d",ch);
}
===============================================
/* Program to read and print a  character */ 

#include<stdio.h>
#include<conio.h>

int main()
{
  char ch;
  printf("Enter any character : ");
  scanf("%c",&ch);
  printf("\n\nThe Entered Character is : %c",ch);
}
================================================
/* Program to read and print a  character */ 

#include<stdio.h>
#include<conio.h>

int main()
{
  char ch;
  printf("Enter any character : ");
  // ch = getch();
  ch = getche();
  printf("\n\nThe Entered Character is : ");
  putch(ch);
}
===============================================
Strings : A string is a collection of characters terminated by NULL character('\0'). As a string contains all character values,it can also define a string as an array of characters.

=> A string can be declared as below:
Syntax-1 :
 char str-var[size]; where 'size' represents the max. no. of characters that can be stored under the string variable.
Eg:
 char str[30]; => 30 characters X 1 byte => 30 bytes of memory

Syntax-2 :
 char *str-var;
===============================================
Reading a string as input : scanf(%s),gets()
Printing a string as output : printf(%s),puts()
===============================================
/* Program to read and print a string */ 

#include<stdio.h>
#include<conio.h>

int main()
{
  char name[30];
  puts("Enter your name : ");
  gets(name);
  printf("Welcome %s ",name);
}
===============================================
/* Implementing functions in string.h */

#include<stdio.h>
#include<string.h>

int main()
{
  char s1[30],s2[30];
  printf("Enter any String : ");
  gets(s1);
  printf("\n The Entered String is : %s",s1);
  printf("\n Length of Given String : %d",strlen(s1));
  printf("\n String into uppercase : %s",strupr(s1));
  printf("\n String into lowercase : %s",strlwr(s1));
  strcpy(s2,s1); // copies string 's1' into 's2'
  printf("\n The Copied String : %s",s2);
  strrev(s2); // Reverses the given string
  printf("\n The Reversed String : %s",s2);
  if(strcmp(s1,s2) == 0)
    printf("\n The Entered String is a Palindrome");
  else
    printf("\n The Entered String is not a Palindrome");
  strcat(s1,s2); // appends(concatenates) string s2 to s1
  printf("\n The Concatenated String : %s",s1);
}
=================================================
Limitations of Arrays :
=> Arrays are static in nature. They are neither growable nor shrinkable
=> Arrays will result in under utilisation of memory
=> Insertion or Deletion or array elements is difficult or time consuming
=> Arrays need continuous memory allocation.
=================================================
